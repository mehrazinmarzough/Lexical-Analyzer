0: // A function to test various aspects of the programming language -> T_Comment
65: whitespace -> T_Whitespace
66: void -> T_Id
70: whitespace -> T_Whitespace
71: test_function -> T_Id
84: ( -> T_LP
85: int -> T_Int
88: whitespace -> T_Whitespace
89: a -> T_Id
90: , -> T_Comma
91: whitespace -> T_Whitespace
92: int -> T_Int
95: whitespace -> T_Whitespace
96: b -> T_Id
97: , -> T_Comma
98: whitespace -> T_Whitespace
99: bool -> T_Bool
103: whitespace -> T_Whitespace
104: c -> T_Id
105: ) -> T_RP
106: whitespace -> T_Whitespace
107: { -> T_LC
108: whitespace -> T_Whitespace
113: if -> T_If
115: whitespace -> T_Whitespace
116: ( -> T_LP
117: c -> T_Id
118: whitespace -> T_Whitespace
119: == -> T_ROp_E
121: whitespace -> T_Whitespace
122: true -> T_True
126: ) -> T_RP
127: whitespace -> T_Whitespace
128: { -> T_LC
129: whitespace -> T_Whitespace
138: // Calculate and print the sum of a and b -> T_Comment
179: whitespace -> T_Whitespace
188: int -> T_Int
191: whitespace -> T_Whitespace
192: _sum -> T_Id
196: whitespace -> T_Whitespace
197: = -> T_Assign
198: whitespace -> T_Whitespace
199: a -> T_Id
200: whitespace -> T_Whitespace
201: + -> T_AOp_PL
202: whitespace -> T_Whitespace
203: b -> T_Id
204: ; -> T_Semicolon
205: whitespace -> T_Whitespace
214: print -> T_Print
219: ( -> T_LP
220: "Sum: " -> T_String
227: , -> T_Comma
228: whitespace -> T_Whitespace
229: sum -> T_Id
232: ) -> T_RP
233: ; -> T_Semicolon
234: whitespace -> T_Whitespace
239: } -> T_RC
240: whitespace -> T_Whitespace
241: else -> T_Else
245: whitespace -> T_Whitespace
246: { -> T_LC
247: whitespace -> T_Whitespace
256: // Calculate and print the difference of a and b -> T_Comment
304: whitespace -> T_Whitespace
313: int -> T_Int
316: whitespace -> T_Whitespace
317: difference -> T_Id
327: whitespace -> T_Whitespace
328: = -> T_Assign
329: whitespace -> T_Whitespace
330: a -> T_Id
331: whitespace -> T_Whitespace
332: - -> T_AOp_MN
333: whitespace -> T_Whitespace
334: b -> T_Id
335: ; -> T_Semicolon
336: whitespace -> T_Whitespace
345: print -> T_Print
350: ( -> T_LP
351: "Difference: " -> T_String
365: , -> T_Comma
366: whitespace -> T_Whitespace
367: difference -> T_Id
377: ) -> T_RP
378: ; -> T_Semicolon
379: whitespace -> T_Whitespace
384: } -> T_RC
385: whitespace -> T_Whitespace
386: } -> T_RC
387: whitespace -> T_Whitespace
389: int -> T_Int
392: whitespace -> T_Whitespace
393: main -> T_Id
397: ( -> T_LP
398: ) -> T_RP
399: whitespace -> T_Whitespace
400: { -> T_LC
401: whitespace -> T_Whitespace
406: // Initialize variables of different types -> T_Comment
448: whitespace -> T_Whitespace
453: int -> T_Int
456: whitespace -> T_Whitespace
457: _integer_var -> T_Id
469: whitespace -> T_Whitespace
470: = -> T_Assign
471: whitespace -> T_Whitespace
472: 10 -> T_Decimal
474: ; -> T_Semicolon
475: whitespace -> T_Whitespace
480: char -> T_Char
484: whitespace -> T_Whitespace
485: _char_var -> T_Id
494: whitespace -> T_Whitespace
495: = -> T_Assign
496: whitespace -> T_Whitespace
497: 'A' -> T_Character
500: ; -> T_Semicolon
501: whitespace -> T_Whitespace
506: bool -> T_Bool
510: whitespace -> T_Whitespace
511: bool_var -> T_Id
519: whitespace -> T_Whitespace
520: = -> T_Assign
521: whitespace -> T_Whitespace
522: true -> T_True
526: ; -> T_Semicolon
527: whitespace -> T_Whitespace
532: string_var -> T_Id
542: whitespace -> T_Whitespace
543: = -> T_Assign
544: whitespace -> T_Whitespace
545: "Hello, world!" -> T_String
560: ; -> T_Semicolon
561: whitespace -> T_Whitespace
566: const -> T_Id
571: whitespace -> T_Whitespace
572: char -> T_Char
576: * -> T_AOp_ML
577: whitespace -> T_Whitespace
578: const_char_ptr -> T_Id
592: whitespace -> T_Whitespace
593: = -> T_Assign
594: whitespace -> T_Whitespace
595: "This is a constant string." -> T_String
623: ; -> T_Semicolon
624: whitespace -> T_Whitespace
630: // Print the values of variables -> T_Comment
662: whitespace -> T_Whitespace
667: print -> T_Print
672: ( -> T_LP
673: "Integer variable: " -> T_String
693: , -> T_Comma
694: whitespace -> T_Whitespace
695: integer_var -> T_Id
706: ) -> T_RP
707: ; -> T_Semicolon
708: whitespace -> T_Whitespace
713: print -> T_Print
718: ( -> T_LP
719: "Double variable: " -> T_String
738: , -> T_Comma
739: whitespace -> T_Whitespace
740: double_var -> T_Id
750: ) -> T_RP
751: ; -> T_Semicolon
752: whitespace -> T_Whitespace
757: print -> T_Print
762: ( -> T_LP
763: "Character variable: " -> T_String
785: , -> T_Comma
786: whitespace -> T_Whitespace
787: char_var -> T_Id
795: ) -> T_RP
796: ; -> T_Semicolon
797: whitespace -> T_Whitespace
802: print -> T_Print
807: ( -> T_LP
808: "String variable: " -> T_String
827: , -> T_Comma
828: whitespace -> T_Whitespace
829: string_var -> T_Id
839: ) -> T_RP
840: ; -> T_Semicolon
841: whitespace -> T_Whitespace
846: print -> T_Print
851: ( -> T_LP
852: "Constant character pointer: " -> T_String
882: , -> T_Comma
883: whitespace -> T_Whitespace
884: const_char_ptr -> T_Id
898: ) -> T_RP
899: ; -> T_Semicolon
900: whitespace -> T_Whitespace
906: // Perform arithmetic operations -> T_Comment
938: whitespace -> T_Whitespace
943: int -> T_Int
946: whitespace -> T_Whitespace
947: _num1 -> T_Id
952: whitespace -> T_Whitespace
953: = -> T_Assign
954: whitespace -> T_Whitespace
955: 20 -> T_Decimal
957: ; -> T_Semicolon
958: whitespace -> T_Whitespace
963: int -> T_Int
966: whitespace -> T_Whitespace
967: _num2 -> T_Id
972: whitespace -> T_Whitespace
973: = -> T_Assign
974: whitespace -> T_Whitespace
975: 5 -> T_Decimal
976: ; -> T_Semicolon
977: whitespace -> T_Whitespace
982: int -> T_Int
985: whitespace -> T_Whitespace
986: _sum -> T_Id
990: whitespace -> T_Whitespace
991: = -> T_Assign
992: whitespace -> T_Whitespace
993: num1 -> T_Id
997: whitespace -> T_Whitespace
998: + -> T_AOp_PL
999: whitespace -> T_Whitespace
1000: num2 -> T_Id
1004: ; -> T_Semicolon
1005: whitespace -> T_Whitespace
1010: int -> T_Int
1013: whitespace -> T_Whitespace
1014: _difference -> T_Id
1025: whitespace -> T_Whitespace
1026: = -> T_Assign
1027: whitespace -> T_Whitespace
1028: num1 -> T_Id
1032: whitespace -> T_Whitespace
1033: - -> T_AOp_MN
1034: whitespace -> T_Whitespace
1035: num2 -> T_Id
1039: ; -> T_Semicolon
1040: whitespace -> T_Whitespace
1045: int -> T_Int
1048: whitespace -> T_Whitespace
1049: _product -> T_Id
1057: whitespace -> T_Whitespace
1058: = -> T_Assign
1059: whitespace -> T_Whitespace
1060: num1 -> T_Id
1064: whitespace -> T_Whitespace
1065: * -> T_AOp_ML
1066: whitespace -> T_Whitespace
1067: num2 -> T_Id
1071: ; -> T_Semicolon
1072: whitespace -> T_Whitespace
1077: int -> T_Int
1080: whitespace -> T_Whitespace
1081: _remainder -> T_Id
1091: whitespace -> T_Whitespace
1092: = -> T_Assign
1093: whitespace -> T_Whitespace
1094: num1 -> T_Id
1098: whitespace -> T_Whitespace
1099: % -> T_AOp_RM
1100: whitespace -> T_Whitespace
1101: num2 -> T_Id
1105: ; -> T_Semicolon
1106: whitespace -> T_Whitespace
1111: int -> T_Int
1114: whitespace -> T_Whitespace
1115: _power -> T_Id
1121: whitespace -> T_Whitespace
1122: = -> T_Assign
1123: whitespace -> T_Whitespace
1124: static_cast -> T_Id
1135: < -> T_ROp_L
1136: int -> T_Int
1139: > -> T_ROp_G
1140: ( -> T_LP
1141: pow -> T_Id
1144: ( -> T_LP
1145: num1 -> T_Id
1149: , -> T_Comma
1150: whitespace -> T_Whitespace
1151: 2 -> T_Decimal
1152: ) -> T_RP
1153: ) -> T_RP
1154: ; -> T_Semicolon
1155: whitespace -> T_Whitespace
1161: // Print the results of arithmetic operations -> T_Comment
1206: whitespace -> T_Whitespace
1211: print -> T_Print
1216: ( -> T_LP
1217: "Sum: " -> T_String
1224: , -> T_Comma
1225: whitespace -> T_Whitespace
1226: sum -> T_Id
1229: ) -> T_RP
1230: ; -> T_Semicolon
1231: whitespace -> T_Whitespace
1236: print -> T_Print
1241: ( -> T_LP
1242: "Difference: " -> T_String
1256: , -> T_Comma
1257: whitespace -> T_Whitespace
1258: difference -> T_Id
1268: ) -> T_RP
1269: ; -> T_Semicolon
1270: whitespace -> T_Whitespace
1275: print -> T_Print
1280: ( -> T_LP
1281: "Product: " -> T_String
1292: , -> T_Comma
1293: whitespace -> T_Whitespace
1294: product -> T_Id
1301: ) -> T_RP
1302: ; -> T_Semicolon
1303: whitespace -> T_Whitespace
1308: print -> T_Print
1313: ( -> T_LP
1314: "Remainder: " -> T_String
1327: , -> T_Comma
1328: whitespace -> T_Whitespace
1329: remainder -> T_Id
1338: ) -> T_RP
1339: ; -> T_Semicolon
1340: whitespace -> T_Whitespace
1345: print -> T_Print
1350: ( -> T_LP
1351: "Power: " -> T_String
1360: , -> T_Comma
1361: whitespace -> T_Whitespace
1362: power -> T_Id
1367: ) -> T_RP
1368: ; -> T_Semicolon
1369: whitespace -> T_Whitespace
1375: // Test boolean conditions and loops -> T_Comment
1411: whitespace -> T_Whitespace
1416: for -> T_For
1419: whitespace -> T_Whitespace
1420: ( -> T_LP
1421: int -> T_Int
1424: whitespace -> T_Whitespace
1425: i -> T_Id
1426: whitespace -> T_Whitespace
1427: = -> T_Assign
1428: whitespace -> T_Whitespace
1429: 0 -> T_Decimal
1430: ; -> T_Semicolon
1431: whitespace -> T_Whitespace
1432: i -> T_Id
1433: whitespace -> T_Whitespace
1434: < -> T_ROp_L
1435: whitespace -> T_Whitespace
1436: 10 -> T_Decimal
1438: ; -> T_Semicolon
1439: whitespace -> T_Whitespace
1440: + -> T_AOp_PL
1441: + -> T_AOp_PL
1442: i -> T_Id
1443: ) -> T_RP
1444: whitespace -> T_Whitespace
1445: { -> T_LC
1446: whitespace -> T_Whitespace
1455: if -> T_If
1457: whitespace -> T_Whitespace
1458: ( -> T_LP
1459: i -> T_Id
1460: whitespace -> T_Whitespace
1461: % -> T_AOp_RM
1462: whitespace -> T_Whitespace
1463: 2 -> T_Decimal
1464: whitespace -> T_Whitespace
1465: == -> T_ROp_E
1467: whitespace -> T_Whitespace
1468: 0 -> T_Decimal
1469: ) -> T_RP
1470: whitespace -> T_Whitespace
1471: { -> T_LC
1472: whitespace -> T_Whitespace
1485: print -> T_Print
1490: ( -> T_LP
1491: i -> T_Id
1492: , -> T_Comma
1493: whitespace -> T_Whitespace
1494: " is even." -> T_String
1505: ) -> T_RP
1506: ; -> T_Semicolon
1507: whitespace -> T_Whitespace
1516: } -> T_RC
1517: whitespace -> T_Whitespace
1518: else -> T_Else
1522: whitespace -> T_Whitespace
1523: { -> T_LC
1524: whitespace -> T_Whitespace
1537: print -> T_Print
1542: ( -> T_LP
1543: i -> T_Id
1544: , -> T_Comma
1545: whitespace -> T_Whitespace
1546: " is odd." -> T_String
1556: ) -> T_RP
1557: ; -> T_Semicolon
1558: whitespace -> T_Whitespace
1567: } -> T_RC
1568: whitespace -> T_Whitespace
1573: } -> T_RC
1574: whitespace -> T_Whitespace
1580: // Test function calls with different arguments -> T_Comment
1627: whitespace -> T_Whitespace
1632: test_function -> T_Id
1645: ( -> T_LP
1646: 5 -> T_Decimal
1647: , -> T_Comma
1648: whitespace -> T_Whitespace
1649: 3 -> T_Decimal
1650: , -> T_Comma
1651: whitespace -> T_Whitespace
1652: true -> T_True
1656: ) -> T_RP
1657: ; -> T_Semicolon
1658: whitespace -> T_Whitespace
1663: test_function -> T_Id
1676: ( -> T_LP
1677: 10 -> T_Decimal
1679: , -> T_Comma
1680: whitespace -> T_Whitespace
1681: 7 -> T_Decimal
1682: , -> T_Comma
1683: whitespace -> T_Whitespace
1684: false -> T_False
1689: ) -> T_RP
1690: ; -> T_Semicolon
1691: whitespace -> T_Whitespace
1697: return -> T_Return
1703: whitespace -> T_Whitespace
1704: 0 -> T_Decimal
1705: ; -> T_Semicolon
1706: whitespace -> T_Whitespace
1707: } -> T_RC
