0: bool -> T_Bool
4: whitespace -> T_Whitespace
5: test_function -> T_Id
18: ( -> T_LP
19: int -> T_Int
22: whitespace -> T_Whitespace
23: a -> T_Id
24: , -> T_Comma
25: whitespace -> T_Whitespace
26: int -> T_Int
29: whitespace -> T_Whitespace
30: b -> T_Id
31: , -> T_Comma
32: whitespace -> T_Whitespace
33: bool -> T_Bool
37: whitespace -> T_Whitespace
38: c -> T_Id
39: ) -> T_RP
40: whitespace -> T_Whitespace
41: { -> T_LC
42: whitespace -> T_Whitespace
47: if -> T_If
49: whitespace -> T_Whitespace
50: ( -> T_LP
51: c -> T_Id
52: whitespace -> T_Whitespace
53: == -> T_ROp_E
55: whitespace -> T_Whitespace
56: true -> T_True
60: ) -> T_RP
61: whitespace -> T_Whitespace
62: { -> T_LC
63: whitespace -> T_Whitespace
72: return -> T_Return
78: whitespace -> T_Whitespace
79: a -> T_Id
80: whitespace -> T_Whitespace
81: + -> T_AOp_PL
82: whitespace -> T_Whitespace
83: b -> T_Id
84: ; -> T_Semicolon
85: whitespace -> T_Whitespace
90: } -> T_RC
91: whitespace -> T_Whitespace
92: else -> T_Else
96: whitespace -> T_Whitespace
97: { -> T_LC
98: whitespace -> T_Whitespace
107: return -> T_Return
113: whitespace -> T_Whitespace
114: a -> T_Id
115: whitespace -> T_Whitespace
116: - -> T_AOp_MN
117: whitespace -> T_Whitespace
118: b -> T_Id
119: ; -> T_Semicolon
120: whitespace -> T_Whitespace
125: } -> T_RC
126: whitespace -> T_Whitespace
127: } -> T_RC
128: whitespace -> T_Whitespace
130: int -> T_Int
133: whitespace -> T_Whitespace
134: main -> T_Id
138: ( -> T_LP
139: ) -> T_RP
140: whitespace -> T_Whitespace
141: { -> T_LC
142: whitespace -> T_Whitespace
147: bool -> T_Bool
151: whitespace -> T_Whitespace
152: add -> T_Id
155: whitespace -> T_Whitespace
156: = -> T_Assign
157: whitespace -> T_Whitespace
158: true -> T_True
162: ; -> T_Semicolon
163: whitespace -> T_Whitespace
168: char -> T_Char
172: whitespace -> T_Whitespace
173: _assign1 -> T_Id
181: whitespace -> T_Whitespace
182: = -> T_Assign
183: whitespace -> T_Whitespace
184: '=' -> T_Character
187: ; -> T_Semicolon
188: whitespace -> T_Whitespace
193: char -> T_Char
197: whitespace -> T_Whitespace
198: String_1 -> T_Id
206: [ -> T_LB
207: ] -> T_RB
208: whitespace -> T_Whitespace
209: = -> T_Assign
210: whitespace -> T_Whitespace
211: " + " -> T_String
216: ; -> T_Semicolon
217: whitespace -> T_Whitespace
222: char -> T_Char
226: whitespace -> T_Whitespace
227: String_2 -> T_Id
235: [ -> T_LB
236: ] -> T_RB
237: whitespace -> T_Whitespace
238: = -> T_Assign
239: whitespace -> T_Whitespace
240: " - " -> T_String
245: ; -> T_Semicolon
246: whitespace -> T_Whitespace
251: int -> T_Int
254: whitespace -> T_Whitespace
255: _num1 -> T_Id
260: whitespace -> T_Whitespace
261: = -> T_Assign
262: whitespace -> T_Whitespace
263: 10 -> T_Decimal
265: ; -> T_Semicolon
266: whitespace -> T_Whitespace
271: int -> T_Int
274: whitespace -> T_Whitespace
275: _num2 -> T_Id
280: whitespace -> T_Whitespace
281: = -> T_Assign
282: whitespace -> T_Whitespace
283: 5 -> T_Decimal
284: ; -> T_Semicolon
285: whitespace -> T_Whitespace
290: int -> T_Int
293: whitespace -> T_Whitespace
294: _result -> T_Id
301: whitespace -> T_Whitespace
302: = -> T_Assign
303: whitespace -> T_Whitespace
304: 0 -> T_Decimal
305: ; -> T_Semicolon
306: whitespace -> T_Whitespace
312: for -> T_For
315: whitespace -> T_Whitespace
316: ( -> T_LP
317: int -> T_Int
320: whitespace -> T_Whitespace
321: i -> T_Id
322: whitespace -> T_Whitespace
323: = -> T_Assign
324: whitespace -> T_Whitespace
325: 0 -> T_Decimal
326: ; -> T_Semicolon
327: whitespace -> T_Whitespace
328: i -> T_Id
329: whitespace -> T_Whitespace
330: <= -> T_ROp_LE
332: whitespace -> T_Whitespace
333: num1 -> T_Id
337: whitespace -> T_Whitespace
338: / -> T_AOp_DV
339: whitespace -> T_Whitespace
340: 2 -> T_Decimal
341: ; -> T_Semicolon
342: whitespace -> T_Whitespace
343: i -> T_Id
344: whitespace -> T_Whitespace
345: = -> T_Assign
346: whitespace -> T_Whitespace
347: i -> T_Id
348: whitespace -> T_Whitespace
349: + -> T_AOp_PL
350: whitespace -> T_Whitespace
351: 1 -> T_Decimal
352: ) -> T_RP
353: whitespace -> T_Whitespace
354: { -> T_LC
355: whitespace -> T_Whitespace
364: for -> T_For
367: whitespace -> T_Whitespace
368: ( -> T_LP
369: int -> T_Int
372: whitespace -> T_Whitespace
373: j -> T_Id
374: whitespace -> T_Whitespace
375: = -> T_Assign
376: whitespace -> T_Whitespace
377: 0 -> T_Decimal
378: ; -> T_Semicolon
379: whitespace -> T_Whitespace
380: j -> T_Id
381: whitespace -> T_Whitespace
382: != -> T_ROp_NE
384: whitespace -> T_Whitespace
385: num2 -> T_Id
389: whitespace -> T_Whitespace
390: * -> T_AOp_ML
391: whitespace -> T_Whitespace
392: -1 -> T_Decimal
394: ; -> T_Semicolon
395: whitespace -> T_Whitespace
396: j -> T_Id
397: whitespace -> T_Whitespace
398: = -> T_Assign
399: whitespace -> T_Whitespace
400: j -> T_Id
401: whitespace -> T_Whitespace
402: - -> T_AOp_MN
403: whitespace -> T_Whitespace
404: 1 -> T_Decimal
405: ) -> T_RP
406: whitespace -> T_Whitespace
407: { -> T_LC
408: whitespace -> T_Whitespace
421: _result -> T_Id
428: whitespace -> T_Whitespace
429: = -> T_Assign
430: whitespace -> T_Whitespace
431: i -> T_Id
432: whitespace -> T_Whitespace
433: + -> T_AOp_PL
434: whitespace -> T_Whitespace
435: j -> T_Id
436: ; -> T_Semicolon
437: whitespace -> T_Whitespace
450: print -> T_Print
455: ( -> T_LP
456: "Result: " -> T_String
466: , -> T_Comma
467: whitespace -> T_Whitespace
468: result -> T_Id
474: ) -> T_RP
475: ; -> T_Semicolon
476: whitespace -> T_Whitespace
485: } -> T_RC
486: whitespace -> T_Whitespace
491: } -> T_RC
492: whitespace -> T_Whitespace
498: add -> T_Id
501: whitespace -> T_Whitespace
502: = -> T_Assign
503: whitespace -> T_Whitespace
504: false -> T_False
509: ; -> T_Semicolon
510: whitespace -> T_Whitespace
515: for -> T_For
518: whitespace -> T_Whitespace
519: ( -> T_LP
520: int -> T_Int
523: whitespace -> T_Whitespace
524: i -> T_Id
525: whitespace -> T_Whitespace
526: = -> T_Assign
527: whitespace -> T_Whitespace
528: 0 -> T_Decimal
529: ; -> T_Semicolon
530: whitespace -> T_Whitespace
531: ! -> T_LOp_NOT
532: ( -> T_LP
533: i -> T_Id
534: whitespace -> T_Whitespace
535: == -> T_ROp_E
537: whitespace -> T_Whitespace
538: 5 -> T_Decimal
539: ) -> T_RP
540: ; -> T_Semicolon
541: whitespace -> T_Whitespace
542: i -> T_Id
543: whitespace -> T_Whitespace
544: = -> T_Assign
545: whitespace -> T_Whitespace
546: i -> T_Id
547: whitespace -> T_Whitespace
548: + -> T_AOp_PL
549: whitespace -> T_Whitespace
550: 1 -> T_Decimal
551: ) -> T_RP
552: whitespace -> T_Whitespace
553: { -> T_LC
554: whitespace -> T_Whitespace
563: for -> T_For
566: whitespace -> T_Whitespace
567: ( -> T_LP
568: int -> T_Int
571: whitespace -> T_Whitespace
572: j -> T_Id
573: whitespace -> T_Whitespace
574: = -> T_Assign
575: whitespace -> T_Whitespace
576: 0 -> T_Decimal
577: ; -> T_Semicolon
578: whitespace -> T_Whitespace
579: j -> T_Id
580: whitespace -> T_Whitespace
581: >= -> T_ROp_GE
583: whitespace -> T_Whitespace
584: -5 -> T_Decimal
586: ; -> T_Semicolon
587: whitespace -> T_Whitespace
588: j -> T_Id
589: whitespace -> T_Whitespace
590: = -> T_Assign
591: whitespace -> T_Whitespace
592: j -> T_Id
593: whitespace -> T_Whitespace
594: - -> T_AOp_MN
595: whitespace -> T_Whitespace
596: 1 -> T_Decimal
597: ) -> T_RP
598: whitespace -> T_Whitespace
599: { -> T_LC
600: whitespace -> T_Whitespace
613: if -> T_If
615: whitespace -> T_Whitespace
616: ( -> T_LP
617: ( -> T_LP
618: i -> T_Id
619: whitespace -> T_Whitespace
620: % -> T_AOp_RM
621: whitespace -> T_Whitespace
622: 4 -> T_Decimal
623: ) -> T_RP
624: whitespace -> T_Whitespace
625: == -> T_ROp_E
627: whitespace -> T_Whitespace
628: 0 -> T_Decimal
629: whitespace -> T_Whitespace
630: || -> T_LOp_OR
632: whitespace -> T_Whitespace
633: ( -> T_LP
634: i -> T_Id
635: whitespace -> T_Whitespace
636: % -> T_AOp_RM
637: whitespace -> T_Whitespace
638: 3 -> T_Decimal
639: ) -> T_RP
640: whitespace -> T_Whitespace
641: == -> T_ROp_E
643: whitespace -> T_Whitespace
644: 0 -> T_Decimal
645: ) -> T_RP
646: whitespace -> T_Whitespace
663: continue -> T_Continue
671: ; -> T_Semicolon
672: whitespace -> T_Whitespace
685: if -> T_If
687: whitespace -> T_Whitespace
688: ( -> T_LP
689: j -> T_Id
690: whitespace -> T_Whitespace
691: < -> T_ROp_L
692: whitespace -> T_Whitespace
693: -4 -> T_Decimal
695: whitespace -> T_Whitespace
696: && -> T_LOp_AND
698: whitespace -> T_Whitespace
699: i -> T_Id
700: whitespace -> T_Whitespace
701: > -> T_ROp_G
702: whitespace -> T_Whitespace
703: 3 -> T_Decimal
704: ) -> T_RP
705: whitespace -> T_Whitespace
722: break -> T_Break
727: ; -> T_Semicolon
728: whitespace -> T_Whitespace
741: _result -> T_Id
748: whitespace -> T_Whitespace
749: = -> T_Assign
750: whitespace -> T_Whitespace
751: i -> T_Id
752: whitespace -> T_Whitespace
753: - -> T_AOp_MN
754: whitespace -> T_Whitespace
755: j -> T_Id
756: ; -> T_Semicolon
757: whitespace -> T_Whitespace
770: print -> T_Print
775: ( -> T_LP
776: "Result: " -> T_String
786: , -> T_Comma
787: whitespace -> T_Whitespace
788: _result -> T_Id
795: ) -> T_RP
796: ; -> T_Semicolon
797: whitespace -> T_Whitespace
806: } -> T_RC
807: whitespace -> T_Whitespace
812: } -> T_RC
813: whitespace -> T_Whitespace
819: print -> T_Print
824: ( -> T_LP
825: "Test string with escaped characters: " -> T_String
864: ) -> T_RP
865: ; -> T_Semicolon
866: whitespace -> T_Whitespace
871: print -> T_Print
876: ( -> T_LP
877: "\\n newline, \\t tab, \\r carriage return." -> T_String
921: ) -> T_RP
922: ; -> T_Semicolon
923: whitespace -> T_Whitespace
926: print -> T_Print
931: ( -> T_LP
932: "this is\" a whole string no other token like '=' or 'else' or even \\\\comment should be recognized" -> T_String
1033: ) -> T_RP
1034: ; -> T_Semicolon
1035: whitespace -> T_Whitespace
1037: char -> T_Char
1041: whitespace -> T_Whitespace
1042: back -> T_Id
1046: whitespace -> T_Whitespace
1047: = -> T_Assign
1048: whitespace -> T_Whitespace
1049: '\\' -> T_Character
1053: ; -> T_Semicolon
1054: whitespace -> T_Whitespace
1056: char -> T_Char
1060: whitespace -> T_Whitespace
1061: quote -> T_Id
1066: whitespace -> T_Whitespace
1067: = -> T_Assign
1068: whitespace -> T_Whitespace
1069: '\'' -> T_Character
1073: ; -> T_Semicolon
1074: whitespace -> T_Whitespace
1076: int -> T_Int
1079: whitespace -> T_Whitespace
1080: _123 -> T_Id
1084: whitespace -> T_Whitespace
1085: = -> T_Assign
1086: whitespace -> T_Whitespace
1087: 0XABCdef1230 -> T_Hexadecimal
1099: ; -> T_Semicolon
1100: whitespace -> T_Whitespace
1106: return -> T_Return
1112: whitespace -> T_Whitespace
1113: 0 -> T_Decimal
1114: ; -> T_Semicolon
1115: whitespace -> T_Whitespace
1116: } -> T_RC
